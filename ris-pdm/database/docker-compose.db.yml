version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ris-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ris_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-ris_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - ris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ris_user} -d ${POSTGRES_DB:-ris_dashboard}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: ris-db-backup
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ris_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-ris_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./database/backups:/backups
      - ./database/scripts:/scripts
    networks:
      - ris-network
    depends_on:
      postgres:
        condition: service_healthy
    command: /scripts/backup-scheduler.sh
    restart: unless-stopped
    profiles:
      - with-backup

  # Database migration service
  db-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile.migrate
    container_name: ris-db-migrate
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-ris_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-ris_dashboard}
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - ./backend/migrations:/app/migrations
      - ./backend/seeds:/app/seeds
    networks:
      - ris-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migrate

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}

networks:
  ris-network:
    external: true