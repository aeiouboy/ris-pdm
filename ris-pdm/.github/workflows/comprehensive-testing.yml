name: 🧪 Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
  AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
  AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  REDIS_URL: redis://localhost:6379

jobs:
  # Static Analysis and Linting
  static-analysis:
    name: 📊 Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: 📦 Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: 🔍 Lint Backend Code
      working-directory: ./backend
      run: npm run lint
      
    - name: 🔍 Lint Frontend Code
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🔒 Security Audit Backend
      working-directory: ./backend
      run: npm audit --audit-level=moderate
      
    - name: 🔒 Security Audit Frontend
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
    
    - name: 📦 Install Dependencies
      working-directory: ./${{ matrix.component }}
      run: npm ci
    
    - name: 🧪 Run Unit Tests
      working-directory: ./${{ matrix.component }}
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true
    
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.component }}/coverage/clover.xml
        flags: ${{ matrix.component }}
        name: ${{ matrix.component }}-coverage
        fail_ci_if_error: true
    
    - name: 📄 Archive Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.component }}
        path: ./${{ matrix.component }}/coverage/
        retention-days: 30

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: ris_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: 🗃️ Setup Test Database
      working-directory: ./backend
      run: |
        npm run db:migrate:test
        npm run db:seed:test
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/ris_dashboard_test
    
    - name: 🔗 Run Integration Tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/ris_dashboard_test
        CI: true
    
    - name: 📄 Archive Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          backend/test-results/
          backend/logs/
        retention-days: 14

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name != 'schedule' # Skip on scheduled runs to save resources
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: 📦 Install Performance Testing Tools
      working-directory: ./backend
      run: npm install -g autocannon artillery
    
    - name: ⚡ Run Performance Tests
      working-directory: ./backend
      run: |
        npm run test:performance
        npm run test:load
      timeout-minutes: 15
    
    - name: 📊 Performance Benchmark Check
      working-directory: ./backend
      run: node tests/performance/benchmark-validator.js
    
    - name: 📄 Archive Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          backend/performance-reports/
          backend/performance-report-*.json
        retention-days: 30

  # End-to-End Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: 🚀 Start Backend Server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:3001/health
      env:
        NODE_ENV: test
        PORT: 3001
    
    - name: 🌐 Serve Frontend
      working-directory: ./frontend
      run: |
        npm run preview &
        sleep 5
        curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:4173
      env:
        PORT: 4173
    
    - name: 🎭 Run Cypress E2E Tests
      working-directory: ./frontend
      run: npx cypress run --browser ${{ matrix.browser }} --record false
      env:
        CYPRESS_baseUrl: http://localhost:4173
        CYPRESS_apiUrl: http://localhost:3001
    
    - name: 📄 Archive E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          frontend/cypress/screenshots/
          frontend/cypress/videos/
          frontend/cypress/reports/
        retention-days: 14

  # Accessibility Tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: 🌐 Serve Frontend
      working-directory: ./frontend
      run: |
        npm run preview &
        sleep 5
    
    - name: ♿ Run Accessibility Tests
      working-directory: ./frontend
      run: npx cypress run --spec "cypress/e2e/accessibility.cy.js"
    
    - name: 📊 Generate Accessibility Report
      run: |
        npx @axe-core/cli http://localhost:4173 --save accessibility-report.json
        npx pa11y-ci --sitemap http://localhost:4173/sitemap.xml
    
    - name: 📄 Archive Accessibility Results
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-results
        path: |
          accessibility-report.json
          pa11y-results/
        retention-days: 30

  # Security Tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: 🔒 Run OWASP ZAP Security Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3001'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: 🔍 Run Snyk Security Tests
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: 🔐 Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  # Coverage Analysis
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: 📥 Download Coverage Artifacts
      uses: actions/download-artifact@v3
      with:
        path: coverage-reports/
    
    - name: 📊 Generate Comprehensive Coverage Report
      working-directory: ./backend
      run: node tests/coverage-reporter.js report
    
    - name: 📈 Update Coverage Trends
      working-directory: ./backend
      run: node tests/coverage-reporter.js trends
    
    - name: 📄 Archive Coverage Analysis
      uses: actions/upload-artifact@v3
      with:
        name: coverage-analysis
        path: |
          backend/coverage-reports/
        retention-days: 90
    
    - name: 💬 Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverageReport = JSON.parse(fs.readFileSync('./backend/coverage-reports/coverage-report.json', 'utf8'));
          
          const comment = `## 📊 Test Coverage Report
          
          **Overall Status:** ${coverageReport.overall.passed ? '✅ PASSED' : '❌ FAILED'}
          
          ### Backend Coverage
          ${coverageReport.backend.coverage ? 
            Object.entries(coverageReport.backend.coverage)
              .map(([metric, value]) => `- **${metric}:** ${value.toFixed(1)}%`)
              .join('\n') : 'No data available'}
          
          ### Frontend Coverage
          ${coverageReport.frontend.coverage ? 
            Object.entries(coverageReport.frontend.coverage)
              .map(([metric, value]) => `- **${metric}:** ${value.toFixed(1)}%`)
              .join('\n') : 'No data available'}
          
          ${coverageReport.overall.issues.length > 0 ? 
            `\n### ⚠️ Issues\n${coverageReport.overall.issues.map(issue => `- ${issue}`).join('\n')}` : ''}
          
          ---
          *Generated by automated testing pipeline*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Final Status Check
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, integration-tests, e2e-tests, coverage-analysis]
    if: always()
    
    steps:
    - name: 📊 Evaluate Test Results
      run: |
        echo "## 🧪 Test Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.static-analysis.result }}" == "success" ]]; then
          echo "✅ Static Analysis: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Static Analysis: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.coverage-analysis.result }}" == "success" ]]; then
          echo "✅ Coverage Analysis: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage Analysis: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Pipeline Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
    
    - name: 🚨 Fail Pipeline if Critical Tests Failed
      if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure'
      run: exit 1

  # Deployment Readiness
  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: test-summary
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: ✅ Mark as Deployment Ready
      run: |
        echo "## 🚀 Deployment Readiness Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All tests passed successfully" >> $GITHUB_STEP_SUMMARY
        echo "✅ Code is ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** main" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
    
    - name: 🏷️ Create Release Tag
      if: github.event_name == 'push'
      run: |
        TAG="v$(date +%Y%m%d-%H%M%S)"
        git tag $TAG
        git push origin $TAG
        echo "Created release tag: $TAG"